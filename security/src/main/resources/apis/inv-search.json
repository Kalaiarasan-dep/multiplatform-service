{
  "select": {
    "useDefaultAlways": true,
    "default": {
      "query": "SELECT * FROM (SELECT DISTINCT  ir.id AS 'Request Id',IF(st.inv_validate, 'true', 'false') as inv_validate,concat((select value from settings where name ='validation_url' ),ir.id,'&') as url,pa.gst_number AS 'GST Number',s.tax_type, CASE  WHEN iv.igst_rate IS NOT NULL THEN iv.igst_rate WHEN ir.igst_rate IS NOT NULL THEN ir.igst_rate WHEN iv.cgst_rate IS NOT NULL AND iv.sgst_rate IS NOT NULL THEN iv.cgst_rate + iv.sgst_rate WHEN ir.cgst_rate IS NOT NULL AND ir.sgst_rate IS NOT NULL THEN ir.cgst_rate + ir.sgst_rate ELSE NULL END AS 'Gst Amount', CASE WHEN iv.igst_rate IS NOT NULL THEN ROUND(iv.igst_rate + iv.invoice_submitted_amount,2) WHEN ir.igst_rate IS NOT NULL THEN ROUND(ir.igst_rate + ir.total_amount,2) WHEN iv.cgst_rate IS NOT NULL AND iv.sgst_rate IS NOT NULL THEN ROUND(iv.cgst_rate + iv.sgst_rate + iv.invoice_submitted_amount,2) WHEN ir.cgst_rate IS NOT NULL  AND ir.sgst_rate IS NOT NULL THEN ROUND(ir.cgst_rate + ir.sgst_rate + ir.total_amount,2)  ELSE NULL END AS 'Invoice Requested Amount', st.name AS Status, p.name AS Program,CONCAT('Batch ', ub.batch_number) AS Batch, ub.month AS Month,pa.registered_business_name AS Partner,date_format(ir.create_dt,'%d-%m-%Y') AS 'Requested Date',  CASE WHEN iv.invoice_submitted_amount IS NOT NULL THEN  ROUND(iv.invoice_submitted_amount,2) WHEN  ir.total_amount IS NOT NULL THEN  ir.total_amount ELSE NULL END AS 'Cost', (SELECT COUNT(*) FROM `order` o WHERE o.invoice_request_id = ir.id) AS 'Order count', bu.user_id AS user_log_id , ir.status_id as statusId,o.program_id as programId,o.partner_id as partnerId,bu.upload_batch_id as uploadbatchId,ir.id as inv_id , iv.zoho_payment_details->>'$[0].reference_number' AS utr_no,  DATE_FORMAT(JSON_UNQUOTE(JSON_EXTRACT(iv.zoho_payment_details, '$[0].date')), '%d-%m-%Y') AS transaction_date  FROM  invoice_request ir  LEFT JOIN `order` o ON o.invoice_request_id = ir.id  LEFT JOIN   status st ON st.id = ir.status_id  LEFT JOIN  program p ON p.id = o.program_id  LEFT JOIN  bulk_upload_file bu ON bu.id = o.bulk_upload_file_id  LEFT JOIN upload_batch ub ON ub.id = bu.upload_batch_id LEFT JOIN  partner pa ON pa.id = o.partner_id left join state s on s.id=pa.state_id  left join invoice iv on iv.partner_invoice_request_id=ir.id GROUP BY ir.id order by ir.id desc ) AS A where A.user_log_id=:userid   AND (:searchLike IS NULL OR (A.inv_id LIKE CONCAT('%', :searchLike, '%') )) ",
      "countQuery": "SELECT COUNT(*) AS 'Total Rows' FROM  (SELECT DISTINCT ir.id AS 'Request Id', st.name AS Status, p.name AS Program, CONCAT('Batch ', ub.batch_number) AS Batch, ub.month AS Month, pa.registered_business_name AS Partner,ir.create_dt AS 'Requested Date', ir.total_amount AS 'Cost', (SELECT COUNT(*) FROM  `order` o WHERE  o.invoice_request_id = ir.id) AS 'Order count', bu.user_id user_log_id , ir.status_id as statusId,o.program_id as programId,o.partner_id as partnerId,bu.upload_batch_id as uploadbatchId,ir.id as inv_id FROM invoice_request ir LEFT JOIN `order` o ON o.invoice_request_id = ir.id  LEFT JOIN status st ON st.id = ir.status_id LEFT JOIN program p ON p.id = o.program_id LEFT JOIN bulk_upload_file bu ON bu.id = o.bulk_upload_file_id LEFT JOIN upload_batch ub ON ub.id = bu.upload_batch_id LEFT JOIN partner pa ON pa.id = o.partner_id left join state s on s.id=pa.state_id GROUP BY ir.id ) AS A where A.user_log_id=:userid   AND (:searchLike IS NULL OR (A.inv_id LIKE CONCAT('%', :searchLike, '%'))) ",
      "mandatoryFields": [
        "userid",
        "searchLike"
      ]
    },
    "default_PARTNER": {
      "query": "SELECT ir.id AS 'Request Id', (\n   SELECT GROUP_CONCAT(JSON_UNQUOTE(JSON_EXTRACT(reason, '$.name')) SEPARATOR ', ')\n   FROM (\n       SELECT validation_resp->'$.reasons' AS reasons\n       FROM invoice_validation\n       WHERE inv_id = ir.id and ir.status_id=status_id\n       ORDER BY id DESC\n       LIMIT 1\n   ) AS top_validation\n   JOIN JSON_TABLE(top_validation.reasons, '$[*]' COLUMNS (reason JSON PATH '$')) AS reasons_table\n) AS remarks,concat((select value from settings where name ='inv_image_api_url' ),ir.id) as inv_img_link,\niv.invoice_number, DATE_FORMAT(iv.invoice_date,'%d-%m-%Y') AS invoice_date,\ndate_format(irh.create_dt,'%d-%m-%Y') invoice_submitted_date,\ndate_format(irh1.create_dt,'%d-%m-%Y')  invoice_approved_date,\ndate_format(irh2.create_dt,'%d-%m-%Y') invoice_paid_date,\nst.inv_validate, concat((select value from settings where name ='validation_url' ),ir.id,'&') AS url,\npa.gst_number AS 'GST Number',s.tax_type,\n  CASE WHEN iv.igst_rate IS NOT NULL OR iv.cgst_rate IS NOT NULL OR iv.sgst_rate IS NOT NULL THEN \n   IFNULL(iv.igst_rate, 0) + IFNULL(iv.cgst_rate, 0) + IFNULL(iv.sgst_rate, 0)\n    ELSE  IFNULL(ir.igst_rate, 0) + IFNULL(ir.cgst_rate, 0) + IFNULL(ir.sgst_rate, 0)\n    END AS 'Gst Amount',\nCASE WHEN iv.igst_rate IS NOT NULL THEN ROUND(iv.igst_rate + iv.invoice_submitted_amount,2) WHEN ir.igst_rate IS NOT NULL THEN ROUND(ir.igst_rate + ir.total_amount,2) WHEN iv.cgst_rate IS NOT NULL AND iv.sgst_rate IS NOT NULL THEN ROUND(iv.cgst_rate + iv.sgst_rate + iv.invoice_submitted_amount,2) WHEN ir.cgst_rate IS NOT NULL AND ir.sgst_rate IS NOT NULL THEN ROUND(ir.cgst_rate + ir.sgst_rate + ir.total_amount,2) ELSE NULL END AS 'Invoice Requested Amount',\nst.name AS Status, p.name `Program`, CONCAT('Batch ', ub.batch_number)  AS Batch,\nub.month AS Month,pa.registered_business_name AS Partner,\nDATE_FORMAT(ir.create_dt,'%d-%m-%Y') AS 'Requested Date', \nCASE WHEN iv.invoice_submitted_amount IS NOT NULL THEN ROUND(iv.invoice_submitted_amount,2) WHEN ir.total_amount IS NOT NULL THEN ROUND(ir.total_amount,2) ELSE NULL END AS 'Cost',\nCOUNT(o.id) AS 'Order count',\n bu.user_id AS user_log_id, \n\nir.status_id AS statusId,o.program_id AS programId,\no.partner_id AS partnerId,\nbu.upload_batch_id AS uploadbatchId, \npa.gst_number AS gstNumber, \niv.zoho_payment_details->>'$[0].reference_number' AS utr_no,\nDATE_FORMAT(JSON_UNQUOTE(JSON_EXTRACT(iv.zoho_payment_details, '$[0].date')), '%d-%m-%Y') AS transaction_date\nFROM invoice_request ir\nLEFT JOIN `order` o ON o.invoice_request_id = ir.id\nLEFT JOIN `status` st ON st.id = ir.status_id\nLEFT JOIN program p ON p.id = o.program_id\nLEFT JOIN bulk_upload_file bu ON bu.id = o.bulk_upload_file_id\nLEFT JOIN upload_batch ub ON ub.id = bu.upload_batch_id\nLEFT JOIN partner pa ON pa.id = o.partner_id\nLEFT JOIN state s ON s.id=pa.state_id\nLEFT JOIN invoice_request_history irh ON irh.partner_invoice_request_id=ir.id and irh.status_id=10\nLEFT JOIN invoice_request_history irh1 ON irh1.partner_invoice_request_id=ir.id and irh1.status_id=7\nLEFT JOIN invoice_request_history irh2 ON irh2.partner_invoice_request_id=ir.id and irh2.status_id=8\nLEFT JOIN invoice iv ON iv.partner_invoice_request_id=ir.id\n left JOIN partner_has_user phu ON phu.partner_id = o.partner_id  \n  where  phu.user_id=:userid   AND (:searchLike IS NULL OR (ir.id LIKE CONCAT('%', :searchLike, '%') ))\n  GROUP BY ir.id order by ir.id desc ",
      "countQuery": "SELECT count( distinct ir.id) \nFROM invoice_request ir\nLEFT JOIN `order` o ON o.invoice_request_id = ir.id\nLEFT JOIN `status` st ON st.id = ir.status_id\nLEFT JOIN program p ON p.id = o.program_id\nLEFT JOIN bulk_upload_file bu ON bu.id = o.bulk_upload_file_id\nLEFT JOIN upload_batch ub ON ub.id = bu.upload_batch_id\nLEFT JOIN partner pa ON pa.id = o.partner_id\n  left JOIN     partner_has_user phu ON phu.partner_id = o.partner_id  \n   where  phu.user_id=:userid   AND (:searchLike IS NULL OR (ir.id LIKE CONCAT('%', :searchLike, '%') ))\n  GROUP BY ir.id order by ir.id desc ",
      "mandatoryFields": [
        "userid",
        "searchLike"
      ]
    },
    "default_SUPER_ADMIN": {
      "query": "SELECT ir.id AS 'Request Id', (\n   SELECT GROUP_CONCAT(JSON_UNQUOTE(JSON_EXTRACT(reason, '$.name')) SEPARATOR ', ')\n   FROM (\n       SELECT validation_resp->'$.reasons' AS reasons\n       FROM invoice_validation\n       WHERE inv_id = ir.id and ir.status_id=status_id\n       ORDER BY id DESC\n       LIMIT 1\n   ) AS top_validation\n   JOIN JSON_TABLE(top_validation.reasons, '$[*]' COLUMNS (reason JSON PATH '$')) AS reasons_table\n) AS remarks,concat((select value from settings where name ='inv_image_api_url' ),ir.id) as inv_img_link,\niv.invoice_number, DATE_FORMAT(iv.invoice_date,'%d-%m-%Y') AS invoice_date,\ndate_format(irh.create_dt,'%d-%m-%Y') invoice_submitted_date,\ndate_format(irh1.create_dt,'%d-%m-%Y')  invoice_approved_date,\ndate_format(irh2.create_dt,'%d-%m-%Y') invoice_paid_date,\nst.inv_validate, concat((select value from settings where name ='validation_url' ),ir.id,'&') AS url,\npa.gst_number AS 'GST Number',s.tax_type,\n  CASE WHEN iv.igst_rate IS NOT NULL OR iv.cgst_rate IS NOT NULL OR iv.sgst_rate IS NOT NULL THEN \n   IFNULL(iv.igst_rate, 0) + IFNULL(iv.cgst_rate, 0) + IFNULL(iv.sgst_rate, 0)\n    ELSE  IFNULL(ir.igst_rate, 0) + IFNULL(ir.cgst_rate, 0) + IFNULL(ir.sgst_rate, 0)\n    END AS 'Gst Amount',\nCASE WHEN iv.igst_rate IS NOT NULL THEN ROUND(iv.igst_rate + iv.invoice_submitted_amount,2) WHEN ir.igst_rate IS NOT NULL THEN ROUND(ir.igst_rate + ir.total_amount,2) WHEN iv.cgst_rate IS NOT NULL AND iv.sgst_rate IS NOT NULL THEN ROUND(iv.cgst_rate + iv.sgst_rate + iv.invoice_submitted_amount,2) WHEN ir.cgst_rate IS NOT NULL AND ir.sgst_rate IS NOT NULL THEN ROUND(ir.cgst_rate + ir.sgst_rate + ir.total_amount,2) ELSE NULL END AS 'Invoice Requested Amount',\nst.name AS Status, p.name `Program`, CONCAT('Batch ', ub.batch_number)  AS Batch,\nub.month AS Month,pa.registered_business_name AS Partner,\nDATE_FORMAT(ir.create_dt,'%d-%m-%Y') AS 'Requested Date', \nCASE WHEN iv.invoice_submitted_amount IS NOT NULL THEN ROUND(iv.invoice_submitted_amount,2) WHEN ir.total_amount IS NOT NULL THEN ROUND(ir.total_amount,2) ELSE NULL END AS 'Cost',\nCOUNT(o.id) AS 'Order count',\n bu.user_id AS user_log_id, \n\nir.status_id AS statusId,o.program_id AS programId,\no.partner_id AS partnerId,\nbu.upload_batch_id AS uploadbatchId, \npa.gst_number AS gstNumber, \niv.zoho_payment_details->>'$[0].reference_number' AS utr_no,\nDATE_FORMAT(JSON_UNQUOTE(JSON_EXTRACT(iv.zoho_payment_details, '$[0].date')), '%d-%m-%Y') AS transaction_date\nFROM invoice_request ir\nLEFT JOIN `order` o ON o.invoice_request_id = ir.id\nLEFT JOIN `status` st ON st.id = ir.status_id\nLEFT JOIN program p ON p.id = o.program_id\nLEFT JOIN bulk_upload_file bu ON bu.id = o.bulk_upload_file_id\nLEFT JOIN upload_batch ub ON ub.id = bu.upload_batch_id\nLEFT JOIN partner pa ON pa.id = o.partner_id\nLEFT JOIN state s ON s.id=pa.state_id\nLEFT JOIN invoice_request_history irh ON irh.partner_invoice_request_id=ir.id and irh.status_id=10\nLEFT JOIN invoice_request_history irh1 ON irh1.partner_invoice_request_id=ir.id and irh1.status_id=7\nLEFT JOIN invoice_request_history irh2 ON irh2.partner_invoice_request_id=ir.id and irh2.status_id=8\nLEFT JOIN invoice iv ON iv.partner_invoice_request_id=ir.id  \nwhere  bu.user_id =:userid   \n AND (:searchLike IS NULL OR (ir.id LIKE CONCAT('%', :searchLike, '%') ))\n GROUP BY ir.id order by ir.id desc ",
      "countQuery": "SELECT count( distinct ir.id) \nFROM invoice_request ir\nLEFT JOIN `order` o ON o.invoice_request_id = ir.id\nLEFT JOIN `status` st ON st.id = ir.status_id\nLEFT JOIN program p ON p.id = o.program_id\nLEFT JOIN bulk_upload_file bu ON bu.id = o.bulk_upload_file_id\nLEFT JOIN upload_batch ub ON ub.id = bu.upload_batch_id\nLEFT JOIN partner pa ON pa.id = o.partner_id\nwhere  bu.user_id=:userid   AND (:searchLike IS NULL OR (ir.id LIKE CONCAT('%', :searchLike, '%') )) ",
      "mandatoryFields": [
        "userid",
        "searchLike"
      ]
    },
    "supportRoleBasedQueries": true
  }
}